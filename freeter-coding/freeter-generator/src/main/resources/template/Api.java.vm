package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;

import ${mainPath}.common.validator.ValidatorUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import ${package}.${moduleName}.entity.view.${className}View;
import ${package}.${moduleName}.entity.model.${className}Model;


import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.R;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;




/**
 * ${comments}
 *api接口
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags="${comments}接口")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;
 
	
    /**
     * 查询
     */
    @GetMapping("/query")
    @ApiOperation("查询${comments}")
    public R Model(${className}Model ${classname}Model){
		ValidatorUtils.validateEntity(${classname}Model);
        EntityWrapper< ${className}Entity> ew = new EntityWrapper< ${className}Entity>();
		${className}Entity ${classname} = new  ${className}Entity( ${classname}Model);
		ew.setEntity(${classname});
		${classname}Service.selectList(ew);
		return R.ok("查询${comments}成功").put("data",${classname}Service.selectList(ew));
    }

	

    /**
     * 信息
     */
    @GetMapping("/info/{${pk.attrname}}")
    @ApiOperation("获取相应的${comments}")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        ${className}Entity ${classname} = ${classname}Service.selectById(${pk.attrname});

        return R.ok().put("${classname}", ${classname});
    }

    /**
     * 保存
     */
    @PostMapping("/save/json")
    @ApiOperation("添加${comments}数据")
    public R saveJson(@RequestBody ${className}Entity ${classname}){
    	ValidatorUtils.validateEntity(${classname});
        ${classname}Service.insert(${classname});
        return R.ok();
    }
    
    /**
     * 保存
     */
    @PostMapping("/save/form")
    @ApiOperation("添加${comments}数据 （参数：表单格式）")
    public R saveForm(${className}Entity ${classname}){
    	ValidatorUtils.validateEntity(${classname});
        ${classname}Service.insert(${classname});

        return R.ok();
    }

    /**
     * 修改（参数：json）
     */
    @PostMapping("/update/json")
    @ApiOperation("修改${comments}数据（参数：json格式）")
    public R updateJson(@RequestBody ${className}Entity ${classname}){
        ValidatorUtils.validateEntity(${classname});
        ${classname}Service.updateAllColumnById(${classname});//全部更新
        
        return R.ok();
    }


    /**
     * 修改（参数：传统表单）
     */
    @PostMapping("/update/form")
    @ApiOperation("修改${comments}数据（参数：表单格式）")
    public R updateForm(${className}Entity ${classname}){
        ValidatorUtils.validateEntity(${classname});
        ${classname}Service.updateAllColumnById(${classname});//全部更新
        
        return R.ok();
    }

    /**
     * 删除
     */
    @PostMapping("/delete")
    @ApiOperation("删除${comments}数据")
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
        ${classname}Service.deleteBatchIds(Arrays.asList(${pk.attrname}s));
        return R.ok();
    }

}
